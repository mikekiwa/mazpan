<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Estado de Resultado" width="820" height="400" 
	backgroundColor="#cccccc" creationComplete="init()" xmlns:estadoResultado="estadoResultado.*">

	<mx:WebService id="Service" 	wsdl="{index.URL + 'Service.asmx?WSDL'}" showBusyCursor="true" requestTimeout="60">
		<mx:operation name="getItems" 		result="getItemsResult(event)"			fault="ErrorFaultHandler(event, 'getItems')"/>
		<mx:operation name="getFlujo" 		result="getFlujoResult(event)"			fault="ErrorFaultHandler(event, 'getFlujo')"/>
		<mx:operation name="getSucursales" 	result="getSucursalesResult(event)"		fault="ErrorFaultHandler(event, 'getSucursales')"/>
	</mx:WebService>
	
	<mx:Metadata>
		[Event(name="complexClick",type="eventos.ComplexEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.formatters.NumberFormatter;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import eventos.ComplexEvent;
			
			public static const nombre:String = "EstadoResultado";//correspondiente al estado en que se debiera colocar 
			
			[Bindable]
			private var items:Array =  new Array();
			[Bindable]
			private var sucursales_ac:Array =  new Array();
			[Bindable]
			private var nombreSucursales_ac:Array = new Array();
			[Bindable]
            private var meses_ac:ArrayCollection= index.meses;
            
			private var cargarOtros:Boolean = false;
			private var ano_var:int = 2010;
			private var mes_seleccionado:int = 11;
			private var inicializado:Boolean = false;
			private var balanceCargado:Boolean = false;

			public static var formato:NumberFormatter = new NumberFormatter();

			private function ErrorFaultHandler(event:FaultEvent, metodo:String):void
            {
            	trace("Error en clase "+nombre+".mxml en metodo " + metodo + "\nDetalle: "+event.fault.faultString);
            	defaultValues();
            }
            private function init():void
            {
				formato.precision=0;
				formato.useThousandsSeparator=true;
				formato.thousandsSeparatorFrom=".";
				formato.thousandsSeparatorTo=".";
				formato.decimalSeparatorFrom=",";
				formato.decimalSeparatorTo=",";
            	
            	generar_btn.enabled = false;
            	generar_btn2.enabled = false;
            	
            	Service.getSucursales();
            }
            private function getSucursalesResult(event:ResultEvent):void
            {
            	sucursales_ac = event.result.Tables.Sucursales.Rows.source as Array;
            	for(var i:int=0; i<sucursales_ac.length; i++)
            	{
            		nombreSucursales_ac.push(sucursales_ac[i].ShortName);
            	}
            	sucursales_cb.selectedIndex = 0;
            	sucursales_cb.enabled = true;
            	Service.getItems();
            }
            private function getItemsResult(event:ResultEvent):void
            {
            	items = event.result.Tables.Items.Rows.source as Array;
				inicializado = true;
            	cargar_btn.enabled = true;
            	meses_cb.enabled = true;
            	tabla1.height = items.length * 22 + 25;
            	tabla1.width = 1266;
            	this.width = 1286;
				this.height = 103 + items.length * 22;
            }
            public function iniciado():Boolean
            {
            	return inicializado;
            }
            public function actualizarCombos():void
            {
            	meses_cb.selectedIndex = mes_seleccionado;//Esta linea es necesaria, puesto que cuando se vuelve al estado base el combo de seleccion de mes se cambiaba a ENERO
            }
            public function defaultValues():void
            {
            	var defaults:ITEMS = new ITEMS(items);defaults.default_values();
            	sucursales_cb.enabled = true;
            	meses_cb.enabled = true;
            	cargar_btn.enabled = true;
            	cargar_btn.label = "Cargar";
            	balanceCargado = false;
            }
            public function cargar():void
            {
            	sucursales_cb.enabled = false;
            	cargarOtros = false;
            	balanceCargado = false;
            	generar_btn.enabled = false;
            	generar_btn2.enabled = false;
            	cargar_btn.enabled = false;
            	meses_cb.enabled = false;
				var defaults:ITEMS = new ITEMS(items);defaults.default_values();
            	ano_var = ano.value;
            	Service.getFlujo(sucursales_ac[sucursales_cb.selectedIndex].Code,ano_var);
            	cargar_btn.label='Recargar';
            	actualizarCombos();
            }
            public function trimSucursal(arreglo:Array):Array
            {
            	var salida:Array = new Array;
            	var i:int=0;
            	var j:int=0;
            	if(sucursales_ac[sucursales_cb.selectedIndex].Code!='00')
            	{
            		if(sucursales_ac[sucursales_cb.selectedIndex].Code!='01')//si no es curico
            		{
		            	for(i=0; i<arreglo.length; i++)
			            {
			            	if(arreglo[i].Segment_1==sucursales_ac[sucursales_cb.selectedIndex].Code) salida.push(arreglo[i]);
			            }
		            }
		            else//es curico asi que junto curico y rauquen
		            {
		            	var existe:Boolean = false;
		            	for(i=0; i<arreglo.length; i++)
		            	{
		            		if(arreglo[i].Segment_1=="01" || arreglo[i].Segment_1=="05")
		            		{
		            			existe=false;
		            			//Con es siguiente procedimiento procuro ver si el item ya existe en el arreglo de salida,
		            			//ya que de existir es necesario sumar ambos valores.
		            			for(j=0; j<salida.length && !existe; j++)
		            			{
		            				if(salida[j].itemName==arreglo[i].itemName)
		            				{
		            					existe = true;
		            					salida[j].Column1 = int(salida[j].Column1)+int(arreglo[i].Column1);
		            				}
		            			}
		            			if(!existe)
		            				salida.push(arreglo[i]);
		            		}
		            	}
		            }
            	}
            	else
            	{
            		salida = arreglo;            	
            	}
            	return salida;            	
            }
            private function getFlujoResult(event:ResultEvent):void
            {
            	var flujoEne:Array = event.result.FLUJOENE.Tables.MES.Rows.source as Array;// flujoEne=trimSucursal(flujoEne);
            	var flujoFeb:Array = event.result.FLUJOFEB.Tables.MES.Rows.source as Array;// flujoFeb=trimSucursal(flujoFeb);
            	var flujoMar:Array = event.result.FLUJOMAR.Tables.MES.Rows.source as Array;// flujoMar=trimSucursal(flujoMar);
            	var flujoAbr:Array = event.result.FLUJOABR.Tables.MES.Rows.source as Array;// flujoAbr=trimSucursal(flujoAbr);
            	var flujoMay:Array = event.result.FLUJOMAY.Tables.MES.Rows.source as Array;// flujoMay=trimSucursal(flujoMay);
            	var flujoJun:Array = event.result.FLUJOJUN.Tables.MES.Rows.source as Array;// flujoJun=trimSucursal(flujoJun);
            	var flujoJul:Array = event.result.FLUJOJUL.Tables.MES.Rows.source as Array;// flujoJul=trimSucursal(flujoJul);
            	var flujoAgo:Array = event.result.FLUJOAGO.Tables.MES.Rows.source as Array;// flujoAgo=trimSucursal(flujoAgo);
            	var flujoSep:Array = event.result.FLUJOSEP.Tables.MES.Rows.source as Array;// flujoSep=trimSucursal(flujoSep);
            	var flujoOct:Array = event.result.FLUJOOCT.Tables.MES.Rows.source as Array;// flujoOct=trimSucursal(flujoOct);
            	var flujoNov:Array = event.result.FLUJONOV.Tables.MES.Rows.source as Array;// flujoNov=trimSucursal(flujoNov);
            	var flujoDic:Array = event.result.FLUJODIC.Tables.MES.Rows.source as Array;// flujoDic=trimSucursal(flujoDic);
            	
            	var pptoEne:Array = event.result.PPTOENE.Tables.PresupuestoMensual.Rows.source as Array;// pptoEne=trimSucursal(pptoEne);
            	var pptoFeb:Array = event.result.PPTOFEB.Tables.PresupuestoMensual.Rows.source as Array;// pptoFeb=trimSucursal(pptoFeb);
            	var pptoMar:Array = event.result.PPTOMAR.Tables.PresupuestoMensual.Rows.source as Array;// pptoMar=trimSucursal(pptoMar);
            	var pptoAbr:Array = event.result.PPTOABR.Tables.PresupuestoMensual.Rows.source as Array;// pptoAbr=trimSucursal(pptoAbr);
            	var pptoMay:Array = event.result.PPTOMAY.Tables.PresupuestoMensual.Rows.source as Array;// pptoMay=trimSucursal(pptoMay);
            	var pptoJun:Array = event.result.PPTOJUN.Tables.PresupuestoMensual.Rows.source as Array;// pptoJun=trimSucursal(pptoJun);
            	var pptoJul:Array = event.result.PPTOJUL.Tables.PresupuestoMensual.Rows.source as Array;// pptoJul=trimSucursal(pptoJul);
            	var pptoAgo:Array = event.result.PPTOAGO.Tables.PresupuestoMensual.Rows.source as Array;// pptoAgo=trimSucursal(pptoAgo);
            	var pptoSep:Array = event.result.PPTOSEP.Tables.PresupuestoMensual.Rows.source as Array;// pptoSep=trimSucursal(pptoSep);
            	var pptoOct:Array = event.result.PPTOOCT.Tables.PresupuestoMensual.Rows.source as Array;// pptoOct=trimSucursal(pptoOct);
            	var pptoNov:Array = event.result.PPTONOV.Tables.PresupuestoMensual.Rows.source as Array;// pptoNov=trimSucursal(pptoNov);
            	var pptoDic:Array = event.result.PPTODIC.Tables.PresupuestoMensual.Rows.source as Array;// pptoDic=trimSucursal(pptoDic);
            	
            	var i:int;
            	var j:int;
            	var aux:Array = new ITEMS(items).getItemsContables();
            	for(i=0; i<items.length; i++)
            	{
            		
            		items[i].PPTOMENSUAL = [0,0,0,0,0,0,0,0,0,0,0,0];
            		var seguir:Boolean = false;
            		for(j=0; j<aux.length; j++)
            		{
            			if(aux[j]==items[i].itemName) seguir = true;
            		}
            		if(seguir)
            		{
            			items[i].ENE = 0;
            			items[i].FEB = 0;
            			items[i].MAR = 0;
            			items[i].ABR = 0;
            			items[i].MAY = 0;
            			items[i].JUN = 0;
            			items[i].JUL = 0;
            			items[i].AGO = 0;
            			items[i].SEP = 0;
            			items[i].OCT = 0;
            			items[i].NOV = 0;
            			items[i].DIC = 0;
            			items[i].PPTO = 0;
            			items[i].MES = 0;
            			
	            		for(j=0; j<flujoEne.length; j++)
	            		{
	            			if(items[i].itemName==flujoEne[j].itemName) items[i].ENE = int(flujoEne[j].Column1);
	            		}
	            		for(j=0; j<flujoFeb.length; j++)
	            		{
	            			if(items[i].itemName==flujoFeb[j].itemName) items[i].FEB = int(flujoFeb[j].Column1);
	            		}
	            		for(j=0; j<flujoMar.length; j++)
	            		{
	            			if(items[i].itemName==flujoMar[j].itemName) items[i].MAR = int(flujoMar[j].Column1);
	            		}
	            		for(j=0; j<flujoAbr.length; j++)
	            		{
	            			if(items[i].itemName==flujoAbr[j].itemName) items[i].ABR = int(flujoAbr[j].Column1);
	            		}
	            		for(j=0; j<flujoMay.length; j++)
	            		{
	            			if(items[i].itemName==flujoMay[j].itemName) items[i].MAY = int(flujoMay[j].Column1);
	            		}
	            		for(j=0; j<flujoJun.length; j++)
	            		{
	            			if(items[i].itemName==flujoJun[j].itemName) items[i].JUN = int(flujoJun[j].Column1);
	            		}
	            		for(j=0; j<flujoJul.length; j++)
	            		{
	            			if(items[i].itemName==flujoJul[j].itemName) items[i].JUL = int(flujoJul[j].Column1);
	            		}
	            		for(j=0; j<flujoAgo.length; j++)
	            		{
	            			if(items[i].itemName==flujoAgo[j].itemName) items[i].AGO = int(flujoAgo[j].Column1);
	            		}
	            		for(j=0; j<flujoSep.length; j++)
	            		{
	            			if(items[i].itemName==flujoSep[j].itemName) items[i].SEP = int(flujoSep[j].Column1);
	            		}
	            		for(j=0; j<flujoOct.length; j++)
	            		{
	            			if(items[i].itemName==flujoOct[j].itemName) items[i].OCT = int(flujoOct[j].Column1);
	            		}
	            		for(j=0; j<flujoNov.length; j++)
	            		{
	            			if(items[i].itemName==flujoNov[j].itemName) items[i].NOV = int(flujoNov[j].Column1);
	            		}
	            		for(j=0; j<flujoDic.length; j++)
	            		{
	            			if(items[i].itemName==flujoDic[j].itemName) items[i].DIC = int(flujoDic[j].Column1);
	            		}
	/////////////////////////////////////////////////////////////////////////            		
	            		//PPTOMENSUAL
	            		for(j=0; j<pptoEne.length; j++)
	            		{
	            			if(items[i].itemName==pptoEne[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[0] = int(pptoEne[j].Column1);
	            				if(meses_cb.selectedIndex==0) items[i].MES = int(pptoEne[j].Column1);
	            				items[i].PPTO += int(pptoEne[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoFeb.length; j++)
	            		{
	            			if(items[i].itemName==pptoFeb[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[1] = int(pptoFeb[j].Column1);
	            				if(meses_cb.selectedIndex==1) items[i].MES = int(pptoFeb[j].Column1);
	            				if(meses_cb.selectedIndex>=1) items[i].PPTO += int(pptoFeb[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoMar.length; j++)
	            		{
	            			if(items[i].itemName==pptoMar[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[2] = int(pptoMar[j].Column1);
	            				if(meses_cb.selectedIndex==2) items[i].MES = int(pptoMar[j].Column1);
	            				if(meses_cb.selectedIndex>=2) items[i].PPTO += int(pptoMar[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoAbr.length; j++)
	            		{
	            			if(items[i].itemName==pptoAbr[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[3] = int(pptoAbr[j].Column1);
	            				if(meses_cb.selectedIndex==3) items[i].MES = int(pptoAbr[j].Column1);
	            				if(meses_cb.selectedIndex>=3) items[i].PPTO += int(pptoAbr[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoMay.length; j++)
	            		{
	            			if(items[i].itemName==pptoMay[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[4] = int(pptoMay[j].Column1);
	            				if(meses_cb.selectedIndex==4) items[i].MES = int(pptoMay[j].Column1);
	            				if(meses_cb.selectedIndex>=4) items[i].PPTO += int(pptoMay[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoJun.length; j++)
	            		{
	            			if(items[i].itemName==pptoJun[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[5] = int(pptoJun[j].Column1);
	            				if(meses_cb.selectedIndex==5) items[i].MES = int(pptoJun[j].Column1);
	            				if(meses_cb.selectedIndex>=5) items[i].PPTO += int(pptoJun[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoJul.length; j++)
	            		{
	            			if(items[i].itemName==pptoJul[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[6] = int(pptoJul[j].Column1);
	            				if(meses_cb.selectedIndex==6) items[i].MES = int(pptoJul[j].Column1);
	            				if(meses_cb.selectedIndex>=6) items[i].PPTO += int(pptoJul[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoAgo.length; j++)
	            		{
	            			if(items[i].itemName==pptoAgo[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[7] = int(pptoAgo[j].Column1);
	            				if(meses_cb.selectedIndex==7) items[i].MES = int(pptoAgo[j].Column1);
	            				if(meses_cb.selectedIndex>=7) items[i].PPTO += int(pptoAgo[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoSep.length; j++)
	            		{
	            			if(items[i].itemName==pptoSep[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[8] = int(pptoSep[j].Column1);
	            				if(meses_cb.selectedIndex==8) items[i].MES = int(pptoSep[j].Column1);
	            				if(meses_cb.selectedIndex>=8) items[i].PPTO += int(pptoSep[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoOct.length; j++)
	            		{
	            			if(items[i].itemName==pptoOct[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[9] = int(pptoOct[j].Column1);
	            				if(meses_cb.selectedIndex==9) items[i].MES = int(pptoOct[j].Column1);
	            				if(meses_cb.selectedIndex>=9) items[i].PPTO += int(pptoOct[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoNov.length; j++)
	            		{
	            			if(items[i].itemName==pptoNov[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[10] = int(pptoNov[j].Column1);
	            				if(meses_cb.selectedIndex==10) items[i].MES = int(pptoNov[j].Column1);
	            				if(meses_cb.selectedIndex>=10) items[i].PPTO += int(pptoNov[j].Column1);
	            			}
	            		}
	            		for(j=0; j<pptoDic.length; j++)
	            		{
	            			if(items[i].itemName==pptoDic[j].itemName)
	            			{
	            				items[i].PPTOMENSUAL[11] = int(pptoDic[j].Column1);
	            				if(meses_cb.selectedIndex==11) items[i].MES = int(pptoDic[j].Column1);
	            				if(meses_cb.selectedIndex>=11) items[i].PPTO += int(pptoDic[j].Column1);
	            			}
	            		}
	            		
	            		var calculo:ITEMS = new ITEMS(items);
	            		calculo.CALCULAR(ITEMS.VENTASNETAS);	
		            	calculo.CALCULAR(ITEMS.COSTOSTOTALES);
		            	calculo.CALCULAR(ITEMS.MARGENCOMERCIAL);
		            	calculo.CALCULAR(ITEMS.TOTALGASTOSADMINISTRATIVOS);
		            	calculo.CALCULAR(ITEMS.MARGENOPERACIONAL);
		            	calculo.CALCULAR(ITEMS.RESULTADOANTESDEIMPUESTO);
		            	calculo.CALCULAR_IMPUESTO();
		            	calculo.CALCULAR(ITEMS.RESULTADO);
		            	calculo.CALCULAR_OTROS(meses_cb.selectedIndex);
		        		
	            	}
            	}
            	 
            	generar_btn.enabled = true;
            	generar_btn2.enabled = true;
				balanceCargado = true;
        		cargar_btn.enabled = true;
        		cargarOtros = true;
        		meses_cb.enabled = true;
        		sucursales_cb.enabled = true;
            }
			private function generarPDF():void
			{
				var pdf:FORMATO = new FORMATO();
				//pdf.generar(img,items, meses_cb.selectedIndex, meses_cb.text, ano.value);
				pdf.generarTabla(items,tabla1,img,ano_var.toString(),"Estado de Resultado "+meses_cb.text, sucursales_ac[sucursales_cb.selectedIndex].Name,mes_seleccionado);
			}
			private function generarPDF2():void
			{
				var pdf:FORMATO = new FORMATO();
				//pdf.generar(img,items, meses_cb.selectedIndex, meses_cb.text, ano.value);
				pdf.generarTabla2(items,tabla1,img,ano_var.toString(),"Estado de Resultado "+meses_cb.text, sucursales_ac[sucursales_cb.selectedIndex].Name,mes_seleccionado);
			}
            private function actualizarColumnas():void
            {
            	mes_seleccionado = meses_cb.selectedIndex;
            	
            	if(balanceCargado)
            	{
            		var paraActualizarValores:ITEMS = new ITEMS(items);
            		paraActualizarValores.actualizarMes(mes_seleccionado);
            	}
            	
            	tabla1.width = 448 + (meses_cb.selectedIndex +1) * 68;
				
            	if(meses_cb.selectedIndex>4)
            		this.width = 468 + (meses_cb.selectedIndex +1) * 68;
            	else
            		this.width = 820;//12
            	
            	if(meses_cb.selectedIndex>=1)feb.visible=true; else feb.visible=false;
            	if(meses_cb.selectedIndex>=2)mar.visible=true; else mar.visible=false;
            	if(meses_cb.selectedIndex>=3)abr.visible=true; else abr.visible=false;
            	if(meses_cb.selectedIndex>=4)may.visible=true; else may.visible=false;
            	if(meses_cb.selectedIndex>=5)jun.visible=true; else jun.visible=false;
            	if(meses_cb.selectedIndex>=6)jul.visible=true; else jul.visible=false;
            	if(meses_cb.selectedIndex>=7)ago.visible=true; else ago.visible=false;
            	if(meses_cb.selectedIndex>=8)sep.visible=true; else sep.visible=false;
            	if(meses_cb.selectedIndex>=9)oct.visible=true; else oct.visible=false;
            	if(meses_cb.selectedIndex>=10)nov.visible=true; else nov.visible=false;
            	if(meses_cb.selectedIndex>=11)dic.visible=true; else dic.visible=false;
            	
            	if(cargarOtros)
            	{
            		var calculo:ITEMS = new ITEMS(items);
            		calculo.CALCULAR_OTROS(meses_cb.selectedIndex);
            	}
            }
			public function seCargo():Boolean
			{
				return balanceCargado;
			}
			public function getParametros():Object
			{
				var parametros:Object = new Object();
				parametros.items = items;
				parametros.meses = meses_ac;
				parametros.img = img;
				parametros.ano = ano_var;
				parametros.balanceCargado = balanceCargado;
				parametros.idItem = ITEMS.VENTASZONAS+1;
				parametros.itemName = items[ITEMS.VENTASZONAS].itemName;
				parametros.sucursales = sucursales_ac;
				parametros.nombreSucursales = nombreSucursales_ac;
				parametros.selectedSucursal = 0;
				parametros.sucursal = sucursales_ac[sucursales_cb.selectedIndex].Name;
				return parametros;
			}
			private function detalle():void
			{
				if(tabla1.selectedIndex!=-1 && generar_btn.enabled)
            	{
            		var esContable:Boolean = false;
            		var itemsContables:Array = new ITEMS(items).getItemsContables();
            		for(var i:int=0; i<itemsContables.length; i++)
            			if(tabla1.selectedItem.itemName == itemsContables[i]) esContable=true;
            		
            		if(esContable)
            		{
	            		var parametros:Object = getParametros();
						parametros.idItem = tabla1.selectedIndex+1;
						parametros.itemName = tabla1.selectedItem.itemName;
						parametros.selectedSucursal = sucursales_cb.selectedIndex;
						
						dispatchEvent(new ComplexEvent(ComplexEvent.COMPLEX_CLICK,Detalle.nombre,nombre,parametros));
	            	}
            	}
			}
		]]>
	</mx:Script>

	<mx:Image x="299" y="124" width="180" height="100" id="img" source="@Embed('iconos/maspan.png')"/>
	
	<mx:HBox x="0" y="8">
		<mx:Label text="Sucursal:"/>
		<mx:ComboBox dataProvider="{nombreSucursales_ac}" change="{if(seCargo())cargar()}"  id="sucursales_cb" enabled="false" selectedIndex="0" maxWidth="110"/>
		<mx:Label  text="Elija el mes:" id="label2"/>
		<mx:ComboBox dataProvider="{meses_ac}" change="actualizarColumnas()" id="meses_cb" 	  	enabled="false" selectedIndex="11"/>
		<mx:Label  text="Elija el año:" id="label1"/>
		<mx:NumericStepper minimum="1990" maximum="9999" value="2010" 		 id="ano"/>
		<mx:Button label="Cargar"  click="cargar()" 					 	 id="cargar_btn"  	enabled="false" width="77"/>
		<mx:Button label="Generar 1" click="generarPDF()" 					 id="generar_btn" 	enabled="true" width="81"/>
		<mx:Button label="Generar 2" click="generarPDF2()" 					 id="generar_btn2" 	enabled="true" width="81"/>
	</mx:HBox>
	
	<estadoResultado:myDataGrid id="tabla1" y="38" width="100%" height="100%" dataProvider="{items}">
		<estadoResultado:columns>
			<mx:DataGridColumn headerText="Cuenta" 	dataField="itemName" sortable="false" width="176"/>
			<mx:DataGridColumn headerText="ENE" 	dataField="ENE" 	sortable="false" textAlign="right" width="68" id="ene"/>
			<mx:DataGridColumn headerText="FEB" 	dataField="FEB"		sortable="false" textAlign="right" width="68" id="feb"/>
			<mx:DataGridColumn headerText="MAR" 	dataField="MAR" 	sortable="false" textAlign="right" width="68" id="mar"/>
			<mx:DataGridColumn headerText="ABR" 	dataField="ABR" 	sortable="false" textAlign="right" width="68" id="abr"/>
			<mx:DataGridColumn headerText="MAY" 	dataField="MAY" 	sortable="false" textAlign="right" width="68" id="may"/>
			<mx:DataGridColumn headerText="JUN" 	dataField="JUN" 	sortable="false" textAlign="right" width="68" id="jun"/>
			<mx:DataGridColumn headerText="JUL" 	dataField="JUL" 	sortable="false" textAlign="right" width="68" id="jul"/>
			<mx:DataGridColumn headerText="AGO" 	dataField="AGO" 	sortable="false" textAlign="right" width="68" id="ago"/>
			<mx:DataGridColumn headerText="SEP" 	dataField="SEP" 	sortable="false" textAlign="right" width="68" id="sep"/>
			<mx:DataGridColumn headerText="OCT" 	dataField="OCT" 	sortable="false" textAlign="right" width="68" id="oct"/>
			<mx:DataGridColumn headerText="NOV" 	dataField="NOV" 	sortable="false" textAlign="right" width="68" id="nov"/>
			<mx:DataGridColumn headerText="DIC" 	dataField="DIC" 	sortable="false" textAlign="right" width="68" id="dic"/>
			<mx:DataGridColumn headerText="PPTO MES" dataField="MES" 	sortable="false" textAlign="right" width="68"/>
			<mx:DataGridColumn headerText="ACUM" 	dataField="REAL" 	sortable="false" textAlign="right" width="68"/>
			<mx:DataGridColumn headerText="PPTO" 	dataField="PPTO" 	sortable="false" textAlign="right" width="71"/>
			<mx:DataGridColumn headerText="DESV %" 	dataField="DESV" 	sortable="false" textAlign="right" width="65"/>
		</estadoResultado:columns>
	</estadoResultado:myDataGrid>
</mx:Panel>
