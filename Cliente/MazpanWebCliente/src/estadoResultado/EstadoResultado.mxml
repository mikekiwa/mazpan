<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" title="Estado de Resultado" width="800" height="400" 
	backgroundColor="#cccccc" creationComplete="init()">

	<mx:WebService id="Service" 	wsdl="{index.URL + 'Service.asmx?WSDL'}" showBusyCursor="true">
		<mx:operation name="getItems" 		result="getItemsResult(event)"			fault="ErrorFaultHandler(event, 'getItems')"/>
		<mx:operation name="getFlujo" 		result="getFlujoResult(event)"			fault="ErrorFaultHandler(event, 'getFlujo')"/>
	</mx:WebService>
	
	<mx:Metadata>
		[Event(name="complexClick",type="eventos.ComplexEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ItemResponder;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import eventos.ComplexEvent;
			
			public static const nombre:String = "EstadoResultado";//correspondiente al estado en que se debiera colocar 
			
			[Bindable]
			private var items:Array =  new Array();
			[Bindable]
            private var meses_ac:ArrayCollection= index.meses;
            
			private var cargarOtros:Boolean = false;
			private var ano_var:int = 2010;
			private var mes_seleccionado:int = 11;
			private var inicializado:Boolean = false;
			private var balanceCargado:Boolean = false;

			private function ErrorFaultHandler(event:FaultEvent, metodo:String):void
            {
            	trace("Error en clase "+nombre+".mxml en metodo " + metodo + "\nDetalle: "+event.fault.faultString);
            }
            private function init():void
            {
//            	revisar_btn.enabled = false;
//            	amarre_btn.enabled = false;
            	generar_btn.enabled = false;
//            	grafico_btn.enabled = false;
            	
            	Service.getItems();
            }
            public function actualizarMeses():void
            {
            	meses_cb.selectedIndex = mes_seleccionado;//Esta linea es necesaria, puesto que cuando se vuelve al estado base el combo de seleccion de mes se cambiaba a ENERO
            }
            public function cargar():void
            {
            	cargarOtros = false;
            	balanceCargado = false;
            	generar_btn.enabled = false;
            	cargar_btn.enabled = false;
            	meses_cb.enabled = false;
//            	grafico_btn.enabled = false;
				var default_Values:ITEMS = new ITEMS(items);default_Values.default_values();
            	ano_var = ano.value;
            	Service.getFlujo(items[ITEMS.VENTASZONAS].id, items[ITEMS.VENTASZONAS].itemName, ITEMS.VENTASZONAS,ano_var);
            	cargar_btn.label='Recargar';
            	actualizarMeses();
            }
            private function getItemsResult(event:ResultEvent):void
            {
            	items = event.result.Tables.Items.Rows.source as Array;
//            	revisar_btn.enabled = true;
//            	amarre_btn.enabled = true;
				inicializado = true;
            	cargar_btn.enabled = true;
            	meses_cb.enabled = true;
            	tabla1.height = items.length * 22 + 25;
            	tabla1.width = 1266;
            	this.width = 1286;
				this.height = 103 + items.length * 22;
            }
            private function getFlujoResult(event:ResultEvent):void
            {
            	items[event.result.orden].ENE = event.result.meses.source[0];
            	items[event.result.orden].FEB = event.result.meses.source[1];
            	items[event.result.orden].MAR = event.result.meses.source[2];
            	items[event.result.orden].ABR = event.result.meses.source[3];
            	items[event.result.orden].MAY = event.result.meses.source[4];
            	items[event.result.orden].JUN = event.result.meses.source[5];
            	items[event.result.orden].JUL = event.result.meses.source[6];
            	items[event.result.orden].AGO = event.result.meses.source[7];
            	items[event.result.orden].SEP = event.result.meses.source[8];
            	items[event.result.orden].OCT = event.result.meses.source[9];
            	items[event.result.orden].NOV = event.result.meses.source[10];
            	items[event.result.orden].DIC = event.result.meses.source[11];
	            items[event.result.orden].PPTOMENSUAL = event.result.pptoMensual;
	            items[event.result.orden].MES = event.result.pptoMensual.source[mes_seleccionado];
	            items[event.result.orden].PPTO = event.result.ppto;

            	
            	if(ITEMS.next(event.result.orden)!=ITEMS.MAXVALUE)
            	{
            		Service.getFlujo(items[ITEMS.next(event.result.orden)].id, items[ITEMS.next(event.result.orden)].itemName, ITEMS.next(event.result.orden),ano_var);
            	}
            	else
            	{
            		var calculo:ITEMS = new ITEMS(items);
            		calculo.CALCULAR(ITEMS.VENTASNETAS);	
	            	calculo.CALCULAR(ITEMS.COSTOSTOTALES);
	            	calculo.CALCULAR(ITEMS.MARGENCOMERCIAL);
	            	calculo.CALCULAR(ITEMS.TOTALGASTOSADMINISTRATIVOS);
	            	calculo.CALCULAR(ITEMS.MARGENOPERACIONAL);
	            	calculo.CALCULAR(ITEMS.RESULTADOANTESDEIMPUESTO);
	            	calculo.CALCULAR_IMPUESTO();
	            	calculo.CALCULAR(ITEMS.RESULTADO);
	            	calculo.CALCULAR_OTROS(meses_cb.selectedIndex);
	            	
            		generar_btn.enabled = true;
					balanceCargado = true;
            		cargar_btn.enabled = true;
            		cargarOtros = true;
            		meses_cb.enabled = true;
//            		grafico_btn.enabled  = true;
            	}
            }
			private function generarPDF():void
			{
				var pdf:LAYOUT = new LAYOUT();
				pdf.generar(img,items, meses_cb.selectedIndex, meses_cb.text, ano.value);
			}
            private function actualizarColumnas():void
            {
            	mes_seleccionado = meses_cb.selectedIndex;
            	
            	if(balanceCargado)
            	{
            		var paraActualizarValores:ITEMS = new ITEMS(items);
            		paraActualizarValores.actualizarMes(mes_seleccionado);
            	}
            	
            	tabla1.width = 448 + (meses_cb.selectedIndex +1) * 68;
				
            	if(meses_cb.selectedIndex>0)
            		this.width = 468 + (meses_cb.selectedIndex +1) * 68;
            	else
            		this.width = 604
            	
            	
            	if(meses_cb.selectedIndex>=1)feb.visible=true; else feb.visible=false;
            	if(meses_cb.selectedIndex>=2)mar.visible=true; else mar.visible=false;
            	if(meses_cb.selectedIndex>=3)abr.visible=true; else abr.visible=false;
            	if(meses_cb.selectedIndex>=4)may.visible=true; else may.visible=false;
            	if(meses_cb.selectedIndex>=5)jun.visible=true; else jun.visible=false;
            	if(meses_cb.selectedIndex>=6)jul.visible=true; else jul.visible=false;
            	if(meses_cb.selectedIndex>=7)ago.visible=true; else ago.visible=false;
            	if(meses_cb.selectedIndex>=8)sep.visible=true; else sep.visible=false;
            	if(meses_cb.selectedIndex>=9)oct.visible=true; else oct.visible=false;
            	if(meses_cb.selectedIndex>=10)nov.visible=true; else nov.visible=false;
            	if(meses_cb.selectedIndex>=11)dic.visible=true; else dic.visible=false;
            	
            	if(cargarOtros)
            	{
            		var calculo:ITEMS = new ITEMS(items);
            		calculo.CALCULAR_OTROS(meses_cb.selectedIndex);
            	}
            }
			public function seCargo():Boolean
			{
				return balanceCargado;
			}
			public function getParametros():Object
			{
				var parametros:Object = new Object();
				parametros.items = items;
				parametros.meses = meses_ac;
				parametros.img = img;
				parametros.ano = ano_var;
				parametros.balanceCargado = balanceCargado;
				parametros.idItem = ITEMS.VENTASZONAS+1;
				parametros.itemName = items[ITEMS.VENTASZONAS].itemName;
				
				return parametros;
			}
			private function detalle():void
			{
				if(tabla1.selectedIndex!=-1 && generar_btn.enabled)
            	{
            		var esContable:Boolean = false;
            		var itemsContables:Array = new ITEMS(items).getItemsContables();
            		for(var i:int=0; i<itemsContables.length; i++)
            			if(tabla1.selectedItem.itemName == itemsContables[i]) esContable=true;
            		
            		if(esContable)
            		{
	            		var parametros:Object = getParametros();
						parametros.idItem = tabla1.selectedIndex+1;
						parametros.itemName = tabla1.selectedItem.itemName;
						
						dispatchEvent(new ComplexEvent(ComplexEvent.COMPLEX_CLICK,Detalle.nombre,nombre,parametros));
	            	}
            	}
			}
		]]>
	</mx:Script>

	<mx:Image x="299" y="124" width="180" height="100" id="img" source="@Embed('iconos/maspan.png')"/>
	
	<mx:Label  text="Elija el mes:" id="label2" x="10" y="12"/>
	<mx:Label  text="Elija el aÃ±o:" id="label1" x="223" y="12"/>
	
	<mx:ComboBox dataProvider="{meses_ac}" change="actualizarColumnas()" id="meses_cb" 	  enabled="false" selectedIndex="11" x="92" y="10" width="113"/>
	<mx:NumericStepper minimum="1990" maximum="9999" value="2010" 		 id="ano" x="302" y="10"/>
	<mx:Button label="Cargar"  click="cargar()" 					 	 id="cargar_btn"  enabled="false" width="90" x="389" y="10"/>
	<mx:Button label="Generar" click="generarPDF()" 					 id="generar_btn" enabled="false" x="487" y="10" width="90"/>
	
	<mx:DataGrid id="tabla1" y="38" width="100%" height="100%" dataProvider="{items}" doubleClickEnabled="true" doubleClick="detalle()">
		<mx:columns>
			<mx:DataGridColumn headerText="Cuenta" 	dataField="itemName" sortable="false" width="176"/>
			<mx:DataGridColumn headerText="ENE" 	dataField="ENE" 	sortable="false" textAlign="right" width="68" id="ene"/>
			<mx:DataGridColumn headerText="FEB" 	dataField="FEB"		sortable="false" textAlign="right" width="68" id="feb"/>
			<mx:DataGridColumn headerText="MAR" 	dataField="MAR" 	sortable="false" textAlign="right" width="68" id="mar"/>
			<mx:DataGridColumn headerText="ABR" 	dataField="ABR" 	sortable="false" textAlign="right" width="68" id="abr"/>
			<mx:DataGridColumn headerText="MAY" 	dataField="MAY" 	sortable="false" textAlign="right" width="68" id="may"/>
			<mx:DataGridColumn headerText="JUN" 	dataField="JUN" 	sortable="false" textAlign="right" width="68" id="jun"/>
			<mx:DataGridColumn headerText="JUL" 	dataField="JUL" 	sortable="false" textAlign="right" width="68" id="jul"/>
			<mx:DataGridColumn headerText="AGO" 	dataField="AGO" 	sortable="false" textAlign="right" width="68" id="ago"/>
			<mx:DataGridColumn headerText="SEP" 	dataField="SEP" 	sortable="false" textAlign="right" width="68" id="sep"/>
			<mx:DataGridColumn headerText="OCT" 	dataField="OCT" 	sortable="false" textAlign="right" width="68" id="oct"/>
			<mx:DataGridColumn headerText="NOV" 	dataField="NOV" 	sortable="false" textAlign="right" width="68" id="nov"/>
			<mx:DataGridColumn headerText="DIC" 	dataField="DIC" 	sortable="false" textAlign="right" width="68" id="dic"/>
			<mx:DataGridColumn headerText="PPTO MES" dataField="MES" 	sortable="false" textAlign="right" width="68"/>
			<mx:DataGridColumn headerText="ACUM" 	dataField="REAL" 	sortable="false" textAlign="right" width="68"/>
			<mx:DataGridColumn headerText="PPTO" 	dataField="PPTO" 	sortable="false" textAlign="right" width="68"/>
			<mx:DataGridColumn headerText="DESV" 	dataField="DESV" 	sortable="false" textAlign="right" width="68"/>
		</mx:columns>
	</mx:DataGrid>
</mx:Panel>
